// <assemblyHash>ab249848</assemblyHash>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.0.0
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     This source code was auto-generated by Microsoft Moles 2010, Version=0.94.0.0.
// </auto-generated>
#pragma warning disable 0067, 0108, 0618
#line hidden
extern alias eapi;
extern alias eapicl;
extern alias mmf;

[assembly: mmf::Microsoft.Moles.Framework.MoledAssembly("emAPI")]
[assembly: global::System.Reflection.AssemblyCompany("")]
[assembly: global::System.Reflection.AssemblyConfiguration("")]
[assembly: global::System.Reflection.AssemblyFileVersion("1.0.0.0")]
[assembly: global::System.Reflection.AssemblyProduct("emAPI")]
[assembly: global::System.Reflection.AssemblyVersion("1.0.0.0")]
[assembly: global::System.Runtime.CompilerServices.InternalsVisibleTo("emAPI.Tests")]
[assembly: global::System.Runtime.CompilerServices.InternalsVisibleTo("emAPI.Explorables")]
[module: mmf::Microsoft.Moles.Framework.Moles.MolesInstrument]
namespace emAPI.Controllers.Moles
{
    /// <summary>Mole type of <see cref="T:emAPI.Controllers.ApportionmentManager"/>
    /// .</summary>
    [mmf::Microsoft.Moles.Framework.Moles.MoleClass(typeof(eapi::emAPI.Controllers.ApportionmentManager))]
    [global::System.Diagnostics.DebuggerDisplay("Mole = ApportionmentManager")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public partial class MApportionmentManager
      : mmf::Microsoft.Moles.Framework.Moles.MoleBase<eapi::emAPI.Controllers.ApportionmentManager>
    {
        /// <summary>Initializes a new mole</summary>
        public MApportionmentManager()
        : base()
        {
        }

        /// <summary>Initializes a new mole for the given instance</summary>
        public MApportionmentManager(eapi::emAPI.Controllers.ApportionmentManager instance)
        : base(instance)
        {
        }

        /// <summary>Define moles for all instances members</summary>
        public static partial class AllInstances
        {
            /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.apportion(System.Collections.Generic.List`1{emAPI.ClassLibrary.Chunk},System.Collections.Generic.List`1{emAPI.ClassLibrary.Chunk})"/>
            /// </summary>
            public static mmf::Microsoft.Moles.Framework.MolesDelegates.Func<eapi::emAPI.Controllers.ApportionmentManager, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>> apportionListOfChunkListOfChunk
            {
                [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("apportion", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance)]
                set
                {
                    mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance
                        ((global::System.Delegate)value, typeof(eapi::emAPI.Controllers.ApportionmentManager), (object)null, 
                         "apportion", typeof(global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>), 
                                      typeof(global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>));
                }
            }

            /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.apportionToDates(System.Collections.Generic.List`1{emAPI.ClassLibrary.Chunk},System.String,System.String)"/>
            /// </summary>
            public static mmf::Microsoft.Moles.Framework.MolesDelegates.Func<eapi::emAPI.Controllers.ApportionmentManager, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>, string, string, double> apportionToDatesListOfChunkStringString
            {
                [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("apportionToDates", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance)]
                set
                {
                    mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance
                        ((global::System.Delegate)value, typeof(eapi::emAPI.Controllers.ApportionmentManager), (object)null, 
                         "apportionToDates", typeof(global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>), typeof(string), typeof(string));
                }
            }

            /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.apportionToPeriod(System.Collections.Generic.List`1{emAPI.ClassLibrary.Chunk},System.DateTime,System.DateTime,emAPI.ClassLibrary.AppotionmentPeriod)"/>
            /// </summary>
            public static mmf::Microsoft.Moles.Framework.MolesDelegates.Func<eapi::emAPI.Controllers.ApportionmentManager, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>, global::System.DateTime, global::System.DateTime, eapicl::emAPI.ClassLibrary.AppotionmentPeriod, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>> apportionToPeriodListOfChunkDateTimeDateTimeAppotionmentPeriod
            {
                [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("apportionToPeriod", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance)]
                set
                {
                    mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance
                        ((global::System.Delegate)value, typeof(eapi::emAPI.Controllers.ApportionmentManager), (object)null, "apportionToPeriod", 
                         typeof(global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>), typeof(global::System.DateTime), 
                         typeof(global::System.DateTime), typeof(eapicl::emAPI.ClassLibrary.AppotionmentPeriod));
                }
            }

            /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.canApportion(System.Collections.Generic.List`1{emAPI.ClassLibrary.Chunk},System.DateTime,System.DateTime)"/>
            /// </summary>
            public static mmf::Microsoft.Moles.Framework.MolesDelegates.Func<eapi::emAPI.Controllers.ApportionmentManager, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>, global::System.DateTime, global::System.DateTime, bool> canApportionListOfChunkDateTimeDateTime
            {
                [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("canApportion", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.NonPublicInstance)]
                set
                {
                    mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMoleNonPublicInstance
                        ((global::System.Delegate)value, typeof(eapi::emAPI.Controllers.ApportionmentManager), (object)null, 
                         "canApportion", typeof(global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>), 
                         typeof(global::System.DateTime), typeof(global::System.DateTime));
                }
            }

            /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.convertInvoicesToChunks(System.Collections.Generic.List`1{emAPI.ClassLibrary.Invoice})"/>
            /// </summary>
            public static mmf::Microsoft.Moles.Framework.MolesDelegates.Func<eapi::emAPI.Controllers.ApportionmentManager, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Invoice>, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>> convertInvoicesToChunksListOfInvoice
            {
                [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("convertInvoicesToChunks", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance)]
                set
                {
                    mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance
                        ((global::System.Delegate)value, typeof(eapi::emAPI.Controllers.ApportionmentManager), 
                         (object)null, "convertInvoicesToChunks", typeof(global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Invoice>));
                }
            }

            /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.convertReadingsToChunks(System.Collections.Generic.List`1{emAPI.ClassLibrary.MeterReading})"/>
            /// </summary>
            public static mmf::Microsoft.Moles.Framework.MolesDelegates.Func<eapi::emAPI.Controllers.ApportionmentManager, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.MeterReading>, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>> convertReadingsToChunksListOfMeterReading
            {
                [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("convertReadingsToChunks", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance)]
                set
                {
                    mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance
                        ((global::System.Delegate)value, typeof(eapi::emAPI.Controllers.ApportionmentManager), 
                         (object)null, "convertReadingsToChunks", typeof(global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.MeterReading>));
                }
            }

            /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.getBestApportionmentPeriod(System.DateTime,System.DateTime)"/>
            /// </summary>
            public static mmf::Microsoft.Moles.Framework.MolesDelegates.Func<eapi::emAPI.Controllers.ApportionmentManager, global::System.DateTime, global::System.DateTime, eapicl::emAPI.ClassLibrary.AppotionmentPeriod> getBestApportionmentPeriodDateTimeDateTime
            {
                [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("getBestApportionmentPeriod", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance)]
                set
                {
                    mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance
                        ((global::System.Delegate)value, typeof(eapi::emAPI.Controllers.ApportionmentManager), (object)null, 
                         "getBestApportionmentPeriod", typeof(global::System.DateTime), typeof(global::System.DateTime));
                }
            }

            /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.setupDatedChunksForApportionToDates(System.DateTime,System.DateTime)"/>
            /// </summary>
            public static mmf::Microsoft.Moles.Framework.MolesDelegates.Func<eapi::emAPI.Controllers.ApportionmentManager, global::System.DateTime, global::System.DateTime, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>> setupDatedChunksForApportionToDatesDateTimeDateTime
            {
                [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("setupDatedChunksForApportionToDates", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.NonPublicInstance)]
                set
                {
                    mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMoleNonPublicInstance
                        ((global::System.Delegate)value, typeof(eapi::emAPI.Controllers.ApportionmentManager), (object)null, 
                         "setupDatedChunksForApportionToDates", typeof(global::System.DateTime), typeof(global::System.DateTime));
                }
            }

            /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.setupDatedChunksForApportionToPeriod(System.DateTime,System.DateTime,emAPI.ClassLibrary.AppotionmentPeriod)"/>
            /// </summary>
            public static mmf::Microsoft.Moles.Framework.MolesDelegates.Func<eapi::emAPI.Controllers.ApportionmentManager, global::System.DateTime, global::System.DateTime, eapicl::emAPI.ClassLibrary.AppotionmentPeriod, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>> setupDatedChunksForApportionToPeriodDateTimeDateTimeAppotionmentPeriod
            {
                [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("setupDatedChunksForApportionToPeriod", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance)]
                set
                {
                    mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance
                        ((global::System.Delegate)value, typeof(eapi::emAPI.Controllers.ApportionmentManager), (object)null, 
                         "setupDatedChunksForApportionToPeriod", typeof(global::System.DateTime), 
                         typeof(global::System.DateTime), typeof(eapicl::emAPI.ClassLibrary.AppotionmentPeriod));
                }
            }
        }

        /// <summary>Assigns the &apos;Current&apos; behavior for all methods of the moled type</summary>
        public static void BehaveAsCurrent()
        {
            global::emAPI.Controllers.Moles.MApportionmentManager.Behavior = mmf::Microsoft.Moles.Framework.MoleBehaviors.CurrentProxy;
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the moled type</summary>
        public static void BehaveAsNotImplemented()
        {
            global::emAPI.Controllers.Moles.MApportionmentManager.Behavior = mmf::Microsoft.Moles.Framework.MoleBehaviors.NotImplemented;
        }

        /// <summary>Assigns the behavior for all methods of the moled type</summary>
        public static mmf::Microsoft.Moles.Framework.Moles.IMoleBehavior Behavior
        {
            set
            {
                mmf::Microsoft.Moles.Framework.MoleBehaviors.AttachToType(typeof(eapi::emAPI.Controllers.ApportionmentManager), value);
            }
        }

        /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.#ctor"/>
        /// </summary>
        public static mmf::Microsoft.Moles.Framework.MolesDelegates.Action<eapi::emAPI.Controllers.ApportionmentManager> Constructor
        {
            [mmf::Microsoft.Moles.Framework.Moles.MoleMethod(".ctor", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance)]
            set
            {
                mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance
                    ((global::System.Delegate)value, typeof(eapi::emAPI.Controllers.ApportionmentManager), (object)null, ".ctor");
            }
        }

        /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.&lt;apportion&gt;b__3(emAPI.ClassLibrary.Chunk)"/>
        /// </summary>
        public static mmf::Microsoft.Moles.Framework.MolesDelegates.Func<eapicl::emAPI.ClassLibrary.Chunk, global::System.DateTime> _apportionb__3Chunk
        {
            [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("<apportion>b__3", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.NonPublicStatic)]
            set
            {
                mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMoleNonPublicStatic
                    ((global::System.Delegate)value, typeof(eapi::emAPI.Controllers.ApportionmentManager), 
                     "<apportion>b__3", typeof(eapicl::emAPI.ClassLibrary.Chunk));
            }
        }

        /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.&lt;convertInvoicesToChunks&gt;b__f(emAPI.ClassLibrary.Invoice)"/>
        /// </summary>
        public static mmf::Microsoft.Moles.Framework.MolesDelegates.Func<eapicl::emAPI.ClassLibrary.Invoice, global::System.DateTime> _convertInvoicesToChunksb__fInvoice
        {
            [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("<convertInvoicesToChunks>b__f", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.NonPublicStatic)]
            set
            {
                mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMoleNonPublicStatic
                    ((global::System.Delegate)value, typeof(eapi::emAPI.Controllers.ApportionmentManager), 
                     "<convertInvoicesToChunks>b__f", typeof(eapicl::emAPI.ClassLibrary.Invoice));
            }
        }

        /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.&lt;convertReadingsToChunks&gt;b__5(emAPI.ClassLibrary.MeterReading)"/>
        /// </summary>
        public static mmf::Microsoft.Moles.Framework.MolesDelegates.Func<eapicl::emAPI.ClassLibrary.MeterReading, global::System.DateTime> _convertReadingsToChunksb__5MeterReading
        {
            [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("<convertReadingsToChunks>b__5", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.NonPublicStatic)]
            set
            {
                mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMoleNonPublicStatic
                    ((global::System.Delegate)value, typeof(eapi::emAPI.Controllers.ApportionmentManager), 
                     "<convertReadingsToChunks>b__5", typeof(eapicl::emAPI.ClassLibrary.MeterReading));
            }
        }

        /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.&lt;getBestApportionmentPeriod&gt;b__11(System.Collections.Generic.KeyValuePair`2{System.String,System.Int32})"/>
        /// </summary>
        public static mmf::Microsoft.Moles.Framework.MolesDelegates.Func<global::System.Collections.Generic.KeyValuePair<string, int>, int> _getBestApportionmentPeriodb__11KeyValuePairOfStringInt32
        {
            [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("<getBestApportionmentPeriod>b__11", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.NonPublicStatic)]
            set
            {
                mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMoleNonPublicStatic
                    ((global::System.Delegate)value, typeof(eapi::emAPI.Controllers.ApportionmentManager), 
                     "<getBestApportionmentPeriod>b__11", typeof(global::System.Collections.Generic.KeyValuePair<string, int>));
            }
        }

        /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.apportion(System.Collections.Generic.List`1{emAPI.ClassLibrary.Chunk},System.Collections.Generic.List`1{emAPI.ClassLibrary.Chunk})"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>> apportionListOfChunkListOfChunk
        {
            [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("apportion", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance)]
            set
            {
                mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance
                    ((global::System.Delegate)(mmf::Microsoft.Moles.Framework.MolesExtensions
                                                 .UnCurry<eapi::emAPI.Controllers.ApportionmentManager, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>, 
                                                          global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>, 
                                                          global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>>(value)), 
                     typeof(eapi::emAPI.Controllers.ApportionmentManager), base.Instance, 
                     "apportion", typeof(global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>), 
                                  typeof(global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>));
            }
        }

        /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.apportionToDates(System.Collections.Generic.List`1{emAPI.ClassLibrary.Chunk},System.String,System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>, string, string, double> apportionToDatesListOfChunkStringString
        {
            [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("apportionToDates", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance)]
            set
            {
                mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance
                    ((global::System.Delegate)(mmf::Microsoft.Moles.Framework.MolesExtensions
                                                 .UnCurry<eapi::emAPI.Controllers.ApportionmentManager, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>, 
                                                          string, string, double>(value)), typeof(eapi::emAPI.Controllers.ApportionmentManager), base.Instance, 
                     "apportionToDates", typeof(global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>), typeof(string), typeof(string));
            }
        }

        /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.apportionToPeriod(System.Collections.Generic.List`1{emAPI.ClassLibrary.Chunk},System.DateTime,System.DateTime,emAPI.ClassLibrary.AppotionmentPeriod)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>, global::System.DateTime, global::System.DateTime, eapicl::emAPI.ClassLibrary.AppotionmentPeriod, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>> apportionToPeriodListOfChunkDateTimeDateTimeAppotionmentPeriod
        {
            [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("apportionToPeriod", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance)]
            set
            {
                mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance
                    ((global::System.Delegate)(mmf::Microsoft.Moles.Framework.MolesExtensions.UnCurry<eapi::emAPI.Controllers.ApportionmentManager, 
                                                                                                      global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>, global::System.DateTime, 
                                                                                                      global::System.DateTime, 
                                                                                                      eapicl::emAPI.ClassLibrary.AppotionmentPeriod, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>>(value)), 
                     typeof(eapi::emAPI.Controllers.ApportionmentManager), base.Instance, "apportionToPeriod", 
                     typeof(global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>), typeof(global::System.DateTime), 
                     typeof(global::System.DateTime), typeof(eapicl::emAPI.ClassLibrary.AppotionmentPeriod));
            }
        }

        /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.canApportion(System.Collections.Generic.List`1{emAPI.ClassLibrary.Chunk},System.DateTime,System.DateTime)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>, global::System.DateTime, global::System.DateTime, bool> canApportionListOfChunkDateTimeDateTime
        {
            [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("canApportion", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.NonPublicInstance)]
            set
            {
                mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMoleNonPublicInstance
                    ((global::System.Delegate)(mmf::Microsoft.Moles.Framework.MolesExtensions
                                                 .UnCurry<eapi::emAPI.Controllers.ApportionmentManager, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>, 
                                                          global::System.DateTime, global::System.DateTime, bool>(value)), typeof(eapi::emAPI.Controllers.ApportionmentManager), base.Instance, 
                     "canApportion", typeof(global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>), 
                     typeof(global::System.DateTime), typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.convertInvoicesToChunks(System.Collections.Generic.List`1{emAPI.ClassLibrary.Invoice})"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Invoice>, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>> convertInvoicesToChunksListOfInvoice
        {
            [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("convertInvoicesToChunks", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance)]
            set
            {
                mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance
                    ((global::System.Delegate)(mmf::Microsoft.Moles.Framework.MolesExtensions.UnCurry
                                                                                                  <eapi::emAPI.Controllers.ApportionmentManager, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Invoice>, 
                                                                                                                                                 global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>>(value)), 
                     typeof(eapi::emAPI.Controllers.ApportionmentManager), 
                     base.Instance, "convertInvoicesToChunks", typeof(global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Invoice>));
            }
        }

        /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.convertReadingsToChunks(System.Collections.Generic.List`1{emAPI.ClassLibrary.MeterReading})"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.MeterReading>, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>> convertReadingsToChunksListOfMeterReading
        {
            [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("convertReadingsToChunks", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance)]
            set
            {
                mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance
                    ((global::System.Delegate)(mmf::Microsoft.Moles.Framework.MolesExtensions.UnCurry<eapi::emAPI.Controllers.ApportionmentManager, 
                                                                                                      global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.MeterReading>, 
                                                                                                      global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>>(value)), 
                     typeof(eapi::emAPI.Controllers.ApportionmentManager), 
                     base.Instance, "convertReadingsToChunks", typeof(global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.MeterReading>));
            }
        }

        /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.getBestApportionmentPeriod(System.DateTime,System.DateTime)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<global::System.DateTime, global::System.DateTime, eapicl::emAPI.ClassLibrary.AppotionmentPeriod> getBestApportionmentPeriodDateTimeDateTime
        {
            [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("getBestApportionmentPeriod", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance)]
            set
            {
                mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance((global::System.Delegate)
                                                                                         (mmf::Microsoft.Moles.Framework.MolesExtensions.UnCurry<eapi::emAPI.Controllers.ApportionmentManager, global::System.DateTime, 
                                                                                                                                                 global::System.DateTime, eapicl::emAPI.ClassLibrary.AppotionmentPeriod>(value)), 
                                                                                       typeof(eapi::emAPI.Controllers.ApportionmentManager), base.Instance, 
                                                                                       "getBestApportionmentPeriod", typeof(global::System.DateTime), typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.setupDatedChunksForApportionToDates(System.DateTime,System.DateTime)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<global::System.DateTime, global::System.DateTime, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>> setupDatedChunksForApportionToDatesDateTimeDateTime
        {
            [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("setupDatedChunksForApportionToDates", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.NonPublicInstance)]
            set
            {
                mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMoleNonPublicInstance((global::System.Delegate)
                                                                                            (mmf::Microsoft.Moles.Framework.MolesExtensions.UnCurry<eapi::emAPI.Controllers.ApportionmentManager, global::System.DateTime, 
                                                                                                                                                    global::System.DateTime, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>>(value)), 
                                                                                          typeof(eapi::emAPI.Controllers.ApportionmentManager), base.Instance, 
                                                                                          "setupDatedChunksForApportionToDates", typeof(global::System.DateTime), typeof(global::System.DateTime));
            }
        }

        /// <summary>Sets the mole of <see cref="M:emAPI.Controllers.ApportionmentManager.setupDatedChunksForApportionToPeriod(System.DateTime,System.DateTime,emAPI.ClassLibrary.AppotionmentPeriod)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<global::System.DateTime, global::System.DateTime, eapicl::emAPI.ClassLibrary.AppotionmentPeriod, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>> setupDatedChunksForApportionToPeriodDateTimeDateTimeAppotionmentPeriod
        {
            [mmf::Microsoft.Moles.Framework.Moles.MoleMethod("setupDatedChunksForApportionToPeriod", mmf::Microsoft.Moles.Framework.Moles.MoleBindingFlags.PublicInstance)]
            set
            {
                mmf::Microsoft.Moles.Framework.Moles.MoleRuntime.SetMolePublicInstance
                    ((global::System.Delegate)(mmf::Microsoft.Moles.Framework.MolesExtensions
                                                 .UnCurry<eapi::emAPI.Controllers.ApportionmentManager, global::System.DateTime, global::System.DateTime, 
                                                                                                                                 eapicl::emAPI.ClassLibrary.AppotionmentPeriod, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Chunk>>(value)), 
                     typeof(eapi::emAPI.Controllers.ApportionmentManager), base.Instance, 
                     "setupDatedChunksForApportionToPeriod", typeof(global::System.DateTime), 
                     typeof(global::System.DateTime), typeof(eapicl::emAPI.ClassLibrary.AppotionmentPeriod));
            }
        }
    }
}
namespace emAPI.Controllers.Moles
{
    /// <summary>Stub type of <see cref="T:emAPI.Controllers.ApportionmentManager"/>
    /// .</summary>
    [mmf::Microsoft.Moles.Framework.Stubs.StubClass(typeof(eapi::emAPI.Controllers.ApportionmentManager))]
    [global::System.Diagnostics.DebuggerDisplay("Stub = ApportionmentManager")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public partial class SApportionmentManager
      : eapi::emAPI.Controllers.ApportionmentManager
      , mmf::Microsoft.Moles.Framework.Stubs.IPartialStub
      , mmf::Microsoft.Moles.Framework.Stubs.IStub
    {
        /// <summary>Initializes a new instance</summary>
        public SApportionmentManager()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            get
            {
                return this.__callBase;
            }
            set
            {
                this.__callBase = value;
            }
        }

        /// <summary>Initializes a new instance of type SApportionmentManager</summary>
        private void InitializeStub()
        {
        }

        /// <summary>Gets or sets the instance behavior.</summary>
        public mmf::Microsoft.Moles.Framework.Behaviors.IBehavior InstanceBehavior
        {
            get
            {
                return mmf::Microsoft.Moles.Framework.BehavedBehaviors.GetValueOrCurrent(this.__instanceBehavior);
            }
            set
            {
                this.__instanceBehavior = value;
            }
        }

        private bool __callBase;

        private mmf::Microsoft.Moles.Framework.Behaviors.IBehavior __instanceBehavior;
    }
}
namespace emAPI.Interfaces.Moles
{
    /// <summary>Stub type of <see cref="T:emAPI.Interfaces.IAccountManager"/>
    /// .</summary>
    [mmf::Microsoft.Moles.Framework.Stubs.StubClass(typeof(eapi::emAPI.Interfaces.IAccountManager))]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IAccountManager")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public partial class SIAccountManager
      : mmf::Microsoft.Moles.Framework.Stubs.StubBase
      , eapi::emAPI.Interfaces.IAccountManager
    {
        /// <summary>Initializes a new instance of type SIAccountManager</summary>
        public SIAccountManager()
        {
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.addPropertyToUser(System.Int32,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Action<int, int> AddPropertyToUserInt32Int32;

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.checkPassword(System.String,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, int, bool> CheckPasswordStringInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.createUser(System.String,System.String,System.String,System.String,System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string, string, string, string, int> CreateUserStringStringStringStringString;

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.editUser(System.Int32,System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, eapicl::emAPI.ClassLibrary.User> EditUserInt32String;

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.emailIsUnique(System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, bool> EmailIsUniqueString;

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.getComparativeCostsForUser(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.AnonymousProperty>> GetComparativeCostsForUserInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.getPropertiesForUser(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Property>> GetPropertiesForUserInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.getUser(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, eapicl::emAPI.ClassLibrary.User> GetUserInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.updatePassword(System.Int32,System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, bool> UpdatePasswordInt32String;

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.usernameIsUnique(System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, bool> UsernameIsUniqueString;

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.validateUser(System.String,System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string, int> ValidateUserStringString;

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.addPropertyToUser(System.Int32,System.Int32)"/>
        /// </summary>
        void eapi::emAPI.Interfaces.IAccountManager.addPropertyToUser(int propertyId, int userId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Action<int, int> sh = this.AddPropertyToUserInt32Int32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Action<int, int>)null)
              sh.Invoke(propertyId, userId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              _behavior.VoidResult<global::emAPI.Interfaces.Moles.SIAccountManager>(this, "emAPI.Interfaces.IAccountManager.addPropertyToUser");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.checkPassword(System.String,System.Int32)"/>
        /// </summary>
        bool eapi::emAPI.Interfaces.IAccountManager.checkPassword(string submittedPassword, int userId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, int, bool> sh = this.CheckPasswordStringInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, int, bool>)null)
              return sh.Invoke(submittedPassword, userId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Interfaces.Moles.SIAccountManager, bool>(this, "emAPI.Interfaces.IAccountManager.checkPassword");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.createUser(System.String,System.String,System.String,System.String,System.String)"/>
        /// </summary>
        int eapi::emAPI.Interfaces.IAccountManager.createUser(
            string forname,
            string surname,
            string email,
            string username,
            string cryptedPassword
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string, string, string, string, int> sh
               = this.CreateUserStringStringStringStringString;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string, string, string, string, int>)null)
              return sh.Invoke(forname, surname, email, username, cryptedPassword);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Interfaces.Moles.SIAccountManager, int>(this, "emAPI.Interfaces.IAccountManager.createUser");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.editUser(System.Int32,System.String)"/>
        /// </summary>
        eapicl::emAPI.ClassLibrary.User eapi::emAPI.Interfaces.IAccountManager.editUser(int userId, string userJSON)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, eapicl::emAPI.ClassLibrary.User> sh = this.EditUserInt32String;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, eapicl::emAPI.ClassLibrary.User>)null)
              return sh.Invoke(userId, userJSON);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Interfaces.Moles.SIAccountManager, eapicl::emAPI.ClassLibrary.User>
                         (this, "emAPI.Interfaces.IAccountManager.editUser");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.emailIsUnique(System.String)"/>
        /// </summary>
        bool eapi::emAPI.Interfaces.IAccountManager.emailIsUnique(string email)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, bool> sh = this.EmailIsUniqueString;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, bool>)null)
              return sh.Invoke(email);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Interfaces.Moles.SIAccountManager, bool>(this, "emAPI.Interfaces.IAccountManager.emailIsUnique");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.getComparativeCostsForUser(System.Int32)"/>
        /// </summary>
        global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.AnonymousProperty> eapi::emAPI.Interfaces.IAccountManager.getComparativeCostsForUser(int userId)
        {
            mmf::Microsoft.Moles.Framework
                   .MolesDelegates.Func<int, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.AnonymousProperty>> sh
               = this.GetComparativeCostsForUserInt32;
            if (sh != (mmf::Microsoft.Moles.Framework
                              .MolesDelegates.Func<int, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.AnonymousProperty>>)null)
              return sh.Invoke(userId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Interfaces.Moles.SIAccountManager, 
                                      global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.AnonymousProperty>>
                         (this, "emAPI.Interfaces.IAccountManager.getComparativeCostsForUser");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.getPropertiesForUser(System.Int32)"/>
        /// </summary>
        global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Property> eapi::emAPI.Interfaces.IAccountManager.getPropertiesForUser(int userId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Property>> sh
               = this.GetPropertiesForUserInt32;
            if (sh !=
                  (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Property>>)
                    null)
              return sh.Invoke(userId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result
                                   <global::emAPI.Interfaces.Moles.SIAccountManager, global::System.Collections.Generic.List<eapicl::emAPI.ClassLibrary.Property>>
                         (this, "emAPI.Interfaces.IAccountManager.getPropertiesForUser");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.getUser(System.Int32)"/>
        /// </summary>
        eapicl::emAPI.ClassLibrary.User eapi::emAPI.Interfaces.IAccountManager.getUser(int userId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, eapicl::emAPI.ClassLibrary.User> sh = this.GetUserInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, eapicl::emAPI.ClassLibrary.User>)null)
              return sh.Invoke(userId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Interfaces.Moles.SIAccountManager, eapicl::emAPI.ClassLibrary.User>
                         (this, "emAPI.Interfaces.IAccountManager.getUser");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.updatePassword(System.Int32,System.String)"/>
        /// </summary>
        bool eapi::emAPI.Interfaces.IAccountManager.updatePassword(int userId, string newPassword)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, bool> sh = this.UpdatePasswordInt32String;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, bool>)null)
              return sh.Invoke(userId, newPassword);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Interfaces.Moles.SIAccountManager, bool>(this, "emAPI.Interfaces.IAccountManager.updatePassword");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.usernameIsUnique(System.String)"/>
        /// </summary>
        bool eapi::emAPI.Interfaces.IAccountManager.usernameIsUnique(string username)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, bool> sh = this.UsernameIsUniqueString;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, bool>)null)
              return sh.Invoke(username);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Interfaces.Moles.SIAccountManager, bool>(this, "emAPI.Interfaces.IAccountManager.usernameIsUnique");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.Interfaces.IAccountManager.validateUser(System.String,System.String)"/>
        /// </summary>
        int eapi::emAPI.Interfaces.IAccountManager.validateUser(string username, string password)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string, int> sh = this.ValidateUserStringString;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string, int>)null)
              return sh.Invoke(username, password);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Interfaces.Moles.SIAccountManager, int>(this, "emAPI.Interfaces.IAccountManager.validateUser");
            }
        }
    }
}
namespace emAPI.Moles
{
    /// <summary>Stub type of <see cref="T:emAPI.IemAPI"/>
    /// .</summary>
    [mmf::Microsoft.Moles.Framework.Stubs.StubClass(typeof(eapi::emAPI.IemAPI))]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IemAPI")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public partial class SIemAPI
      : mmf::Microsoft.Moles.Framework.Stubs.StubBase
      , eapi::emAPI.IemAPI
    {
        /// <summary>Initializes a new instance of type SIemAPI</summary>
        public SIemAPI()
        {
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createElectricityMeter(System.String,System.Double,System.Int32,System.String,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, double, int, string, int, string> CreateElectricityMeterStringDoubleInt32StringInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createGasMeter(System.String,System.Double,System.Int32,System.String,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, double, int, string, int, string> CreateGasMeterStringDoubleInt32StringInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createInvoice(System.Int32,System.String,System.String,System.String,System.Int32,System.Double,System.Double,System.Double,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, string, int, double, double, double, int, string> CreateInvoiceInt32StringStringStringInt32DoubleDoubleDoubleInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createMeterReading(System.String,System.Int32,System.Int32,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, int, int, int, string> CreateMeterReadingStringInt32Int32Int32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createProperty(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string, int, int, int, int, string> CreatePropertyStringStringInt32Int32Int32Int32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createTariffBand(System.Int32,System.Int32,System.Double,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, double, int, string> CreateTariffBandInt32Int32DoubleInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createTariff(System.Double,System.String,System.Int32,System.Int32,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<double, string, int, int, int, string> CreateTariffDoubleStringInt32Int32Int32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createUser(System.String,System.String,System.String,System.String,System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string, string, string, string, string> CreateUserStringStringStringStringString;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.deleteInvoice(System.Int32,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, string> DeleteInvoiceInt32Int32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.deleteMeter(System.Int32,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, string> DeleteMeterInt32Int32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.deleteProperty(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> DeletePropertyInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.deleteReading(System.Int32,System.Int32,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, int, string> DeleteReadingInt32Int32Int32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.deleteTariff(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> DeleteTariffInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.editInvoice(System.Int32,System.String,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, int, string> EditInvoiceInt32StringInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.editMeter(System.Int32,System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string> EditMeterInt32String;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.editMeterReading(System.Int32,System.Int32,System.String,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, string, int, string> EditMeterReadingInt32Int32StringInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.editProperty(System.Int32,System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string> EditPropertyInt32String;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.editTariff(System.Int32,System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string> EditTariffInt32String;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.editUser(System.Int32,System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string> EditUserInt32String;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.emailIsUnique(System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string> EmailIsUniqueString;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.forecastNextInvoice(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> ForecastNextInvoiceInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getAnonymousProperties(System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string> GetAnonymousPropertiesString;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getBenchmarkForProperty(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetBenchmarkForPropertyInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getBuildingType(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetBuildingTypeInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getBuildingTypes"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string> GetBuildingTypes;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getComparativeCostsForUser(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetComparativeCostsForUserInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getDataAtProperty(System.Int32,System.String,System.String,System.Int32,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, int, string> GetDataAtPropertyInt32StringStringInt32Int32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getDataFromMeterByInterval(System.Int32,System.String,System.String,System.Int32,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, int, string> GetDataFromMeterByIntervalInt32StringStringInt32Int32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getDataFromMeter(System.Int32,System.String,System.String,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, string> GetDataFromMeterInt32StringStringInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getDetailsForMeter(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetDetailsForMeterInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getElecData(System.Int32,System.String,System.String,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, string> GetElecDataInt32StringStringInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getFloorArea(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetFloorAreaInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getGasData(System.Int32,System.String,System.String,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, string> GetGasDataInt32StringStringInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getHeatingType(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetHeatingTypeInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getHeatingTypes"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string> GetHeatingTypes;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getInvoice(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetInvoiceInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getInvoicesForMeter(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetInvoicesForMeterInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getLastInvoiceDate(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetLastInvoiceDateInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getMeter(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetMeterInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getMeterReadings(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetMeterReadingsInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getMinimumReadingDateForEdit(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetMinimumReadingDateForEditInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getMinimumReadingDate(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetMinimumReadingDateInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getMinimumTariffDateForEdit(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetMinimumTariffDateForEditInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getMinimumTariffDate(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetMinimumTariffDateInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getMostRecentDate(System.Int32,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, string> GetMostRecentDateInt32Int32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getPeriods"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string> GetPeriods;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getPropertiesForUser(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetPropertiesForUserInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getProperty(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetPropertyInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getPropertyTypeId(System.Int32,System.Int32,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, int, string> GetPropertyTypeIdInt32Int32Int32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getPropertyTypes"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string> GetPropertyTypes;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getReading(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetReadingInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getTariff(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetTariffInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getTotalData(System.Int32,System.String,System.String,System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, string> GetTotalDataInt32StringStringInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getUser(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetUserInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getWallType(System.Int32)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> GetWallTypeInt32;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getWallTypes"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string> GetWallTypes;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.updateBenchmarks"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string> UpdateBenchmarks;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.updatePassword(System.Int32,System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string> UpdatePasswordInt32String;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.usernameIsUnique(System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string> UsernameIsUniqueString;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.validateInvoice(System.Int32,System.Boolean)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, bool, string> ValidateInvoiceInt32Boolean;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.validateUser(System.String,System.String)"/>
        /// </summary>
        public mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string, string> ValidateUserStringString;

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createElectricityMeter(System.String,System.Double,System.Int32,System.String,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.createElectricityMeter(
            string serialNo,
            double scalingFactor,
            int numbDigits,
            string startDate,
            int propertyId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, double, int, string, int, string> sh
               = this.CreateElectricityMeterStringDoubleInt32StringInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, double, int, string, int, string>)null)
              return sh.Invoke(serialNo, scalingFactor, numbDigits, startDate, propertyId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.createElectricityMeter");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createGasMeter(System.String,System.Double,System.Int32,System.String,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.createGasMeter(
            string serialNo,
            double meterCoefficient,
            int numbDigits,
            string startDate,
            int propertyId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, double, int, string, int, string> sh
               = this.CreateGasMeterStringDoubleInt32StringInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, double, int, string, int, string>)null)
              return sh.Invoke(serialNo, meterCoefficient, numbDigits, startDate, propertyId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.createGasMeter");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createInvoice(System.Int32,System.String,System.String,System.String,System.Int32,System.Double,System.Double,System.Double,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.createInvoice(
            int meterId,
            string billDate,
            string startDate,
            string endDate,
            int kWh,
            double consumptionCharge,
            double standingCharge,
            double otherCharge,
            int propertyId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, string, int, double, double, double, int, string> sh
               = this.CreateInvoiceInt32StringStringStringInt32DoubleDoubleDoubleInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, string, int, double, double, double, int, string>)null)
              return sh.Invoke(meterId, billDate, startDate, endDate, kWh, consumptionCharge, standingCharge, otherCharge, propertyId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.createInvoice");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createMeterReading(System.String,System.Int32,System.Int32,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.createMeterReading(
            string date,
            int reading,
            int meterId,
            int propertyId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, int, int, int, string> sh = this.CreateMeterReadingStringInt32Int32Int32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, int, int, int, string>)null)
              return sh.Invoke(date, reading, meterId, propertyId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.createMeterReading");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createProperty(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.createProperty(
            string name,
            string postcode,
            int floorArea,
            int numbBedrooms,
            int typeId,
            int userId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string, int, int, int, int, string> sh
               = this.CreatePropertyStringStringInt32Int32Int32Int32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string, int, int, int, int, string>)null)
              return sh.Invoke(name, postcode, floorArea, numbBedrooms, typeId, userId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.createProperty");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createTariff(System.Double,System.String,System.Int32,System.Int32,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.createTariff(
            double value,
            string startDate,
            int standingChargePeriodId,
            int bandingPeriodId,
            int meterId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<double, string, int, int, int, string> sh = this.CreateTariffDoubleStringInt32Int32Int32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<double, string, int, int, int, string>)null)
              return sh.Invoke(value, startDate, standingChargePeriodId, bandingPeriodId, meterId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.createTariff");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createTariffBand(System.Int32,System.Int32,System.Double,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.createTariffBand(
            int upperLimit,
            int lowerLimit,
            double rate,
            int tariffId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, double, int, string> sh = this.CreateTariffBandInt32Int32DoubleInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, double, int, string>)null)
              return sh.Invoke(upperLimit, lowerLimit, rate, tariffId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.createTariffBand");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.createUser(System.String,System.String,System.String,System.String,System.String)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.createUser(
            string username,
            string forename,
            string surname,
            string password,
            string email
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string, string, string, string, string> sh
               = this.CreateUserStringStringStringStringString;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string, string, string, string, string>)null)
              return sh.Invoke(username, forename, surname, password, email);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.createUser");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.deleteInvoice(System.Int32,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.deleteInvoice(int invoiceId, int propertyId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, string> sh = this.DeleteInvoiceInt32Int32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, string>)null)
              return sh.Invoke(invoiceId, propertyId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.deleteInvoice");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.deleteMeter(System.Int32,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.deleteMeter(int meterId, int propertyId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, string> sh = this.DeleteMeterInt32Int32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, string>)null)
              return sh.Invoke(meterId, propertyId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.deleteMeter");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.deleteProperty(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.deleteProperty(int propertyId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.DeletePropertyInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(propertyId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.deleteProperty");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.deleteReading(System.Int32,System.Int32,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.deleteReading(
            int readingId,
            int meterId,
            int propertyId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, int, string> sh = this.DeleteReadingInt32Int32Int32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, int, string>)null)
              return sh.Invoke(readingId, meterId, propertyId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.deleteReading");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.deleteTariff(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.deleteTariff(int tariffId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.DeleteTariffInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(tariffId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.deleteTariff");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.editInvoice(System.Int32,System.String,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.editInvoice(
            int invoiceId,
            string newInvoice,
            int propertyId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, int, string> sh = this.EditInvoiceInt32StringInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, int, string>)null)
              return sh.Invoke(invoiceId, newInvoice, propertyId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.editInvoice");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.editMeter(System.Int32,System.String)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.editMeter(int meterId, string newMeter)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string> sh = this.EditMeterInt32String;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string>)null)
              return sh.Invoke(meterId, newMeter);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.editMeter");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.editMeterReading(System.Int32,System.Int32,System.String,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.editMeterReading(
            int readingId,
            int meterId,
            string newMeter,
            int propertyId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, string, int, string> sh = this.EditMeterReadingInt32Int32StringInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, string, int, string>)null)
              return sh.Invoke(readingId, meterId, newMeter, propertyId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.editMeterReading");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.editProperty(System.Int32,System.String)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.editProperty(int propertyId, string newProperty)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string> sh = this.EditPropertyInt32String;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string>)null)
              return sh.Invoke(propertyId, newProperty);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.editProperty");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.editTariff(System.Int32,System.String)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.editTariff(int tariffId, string newTariff)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string> sh = this.EditTariffInt32String;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string>)null)
              return sh.Invoke(tariffId, newTariff);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.editTariff");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.editUser(System.Int32,System.String)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.editUser(int userId, string newUser)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string> sh = this.EditUserInt32String;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string>)null)
              return sh.Invoke(userId, newUser);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.editUser");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.emailIsUnique(System.String)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.emailIsUnique(string email)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string> sh = this.EmailIsUniqueString;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string>)null)
              return sh.Invoke(email);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.emailIsUnique");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.forecastNextInvoice(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.forecastNextInvoice(int meterId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.ForecastNextInvoiceInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(meterId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.forecastNextInvoice");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getAnonymousProperties(System.String)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getAnonymousProperties(string propertyId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string> sh = this.GetAnonymousPropertiesString;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string>)null)
              return sh.Invoke(propertyId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getAnonymousProperties");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getBenchmarkForProperty(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getBenchmarkForProperty(int propertyId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetBenchmarkForPropertyInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(propertyId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getBenchmarkForProperty");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getBuildingType(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getBuildingType(int propertyTypeId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetBuildingTypeInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(propertyTypeId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getBuildingType");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getBuildingTypes"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getBuildingTypes()
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string> sh = this.GetBuildingTypes;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string>)null)
              return sh.Invoke();
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getBuildingTypes");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getComparativeCostsForUser(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getComparativeCostsForUser(int userId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetComparativeCostsForUserInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(userId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getComparativeCostsForUser");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getDataAtProperty(System.Int32,System.String,System.String,System.Int32,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getDataAtProperty(
            int propertyId,
            string startDate,
            string endDate,
            int intervalId,
            int dataTypeId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, int, string> sh
               = this.GetDataAtPropertyInt32StringStringInt32Int32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, int, string>)null)
              return sh.Invoke(propertyId, startDate, endDate, intervalId, dataTypeId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getDataAtProperty");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getDataFromMeter(System.Int32,System.String,System.String,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getDataFromMeter(
            int meterId,
            string startDate,
            string endDate,
            int dataTypeId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, string> sh = this.GetDataFromMeterInt32StringStringInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, string>)null)
              return sh.Invoke(meterId, startDate, endDate, dataTypeId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getDataFromMeter");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getDataFromMeterByInterval(System.Int32,System.String,System.String,System.Int32,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getDataFromMeterByInterval(
            int meterId,
            string startDate,
            string endDate,
            int intervalId,
            int dataTypeId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, int, string> sh
               = this.GetDataFromMeterByIntervalInt32StringStringInt32Int32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, int, string>)null)
              return sh.Invoke(meterId, startDate, endDate, intervalId, dataTypeId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getDataFromMeterByInterval");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getDetailsForMeter(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getDetailsForMeter(int meterId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetDetailsForMeterInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(meterId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getDetailsForMeter");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getElecData(System.Int32,System.String,System.String,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getElecData(
            int propertyId,
            string startDate,
            string endDate,
            int dataTypeId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, string> sh = this.GetElecDataInt32StringStringInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, string>)null)
              return sh.Invoke(propertyId, startDate, endDate, dataTypeId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getElecData");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getFloorArea(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getFloorArea(int propertyId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetFloorAreaInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(propertyId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getFloorArea");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getGasData(System.Int32,System.String,System.String,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getGasData(
            int propertyId,
            string startDate,
            string endDate,
            int dataTypeId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, string> sh = this.GetGasDataInt32StringStringInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, string>)null)
              return sh.Invoke(propertyId, startDate, endDate, dataTypeId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getGasData");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getHeatingType(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getHeatingType(int propertyTypeId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetHeatingTypeInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(propertyTypeId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getHeatingType");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getHeatingTypes"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getHeatingTypes()
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string> sh = this.GetHeatingTypes;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string>)null)
              return sh.Invoke();
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getHeatingTypes");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getInvoice(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getInvoice(int invoiceId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetInvoiceInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(invoiceId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getInvoice");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getInvoicesForMeter(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getInvoicesForMeter(int meterId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetInvoicesForMeterInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(meterId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getInvoicesForMeter");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getLastInvoiceDate(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getLastInvoiceDate(int meterId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetLastInvoiceDateInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(meterId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getLastInvoiceDate");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getMeter(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getMeter(int meterId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetMeterInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(meterId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getMeter");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getMeterReadings(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getMeterReadings(int meterId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetMeterReadingsInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(meterId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getMeterReadings");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getMinimumReadingDate(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getMinimumReadingDate(int meterId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetMinimumReadingDateInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(meterId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getMinimumReadingDate");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getMinimumReadingDateForEdit(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getMinimumReadingDateForEdit(int meterId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetMinimumReadingDateForEditInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(meterId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getMinimumReadingDateForEdit");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getMinimumTariffDate(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getMinimumTariffDate(int meterId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetMinimumTariffDateInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(meterId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getMinimumTariffDate");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getMinimumTariffDateForEdit(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getMinimumTariffDateForEdit(int meterId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetMinimumTariffDateForEditInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(meterId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getMinimumTariffDateForEdit");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getMostRecentDate(System.Int32,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getMostRecentDate(int propertyId, int dataTypeId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, string> sh = this.GetMostRecentDateInt32Int32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, string>)null)
              return sh.Invoke(propertyId, dataTypeId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getMostRecentDate");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getPeriods"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getPeriods()
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string> sh = this.GetPeriods;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string>)null)
              return sh.Invoke();
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getPeriods");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getPropertiesForUser(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getPropertiesForUser(int userId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetPropertiesForUserInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(userId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getPropertiesForUser");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getProperty(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getProperty(int propertyId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetPropertyInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(propertyId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getProperty");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getPropertyTypeId(System.Int32,System.Int32,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getPropertyTypeId(
            int heatingId,
            int buildingId,
            int wallId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, int, string> sh = this.GetPropertyTypeIdInt32Int32Int32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, int, int, string>)null)
              return sh.Invoke(heatingId, buildingId, wallId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getPropertyTypeId");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getPropertyTypes"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getPropertyTypes()
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string> sh = this.GetPropertyTypes;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string>)null)
              return sh.Invoke();
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getPropertyTypes");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getReading(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getReading(int readingId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetReadingInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(readingId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getReading");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getTariff(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getTariff(int tariffId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetTariffInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(tariffId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getTariff");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getTotalData(System.Int32,System.String,System.String,System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getTotalData(
            int propertyId,
            string startDate,
            string endDate,
            int dataTypeId
        )
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, string> sh = this.GetTotalDataInt32StringStringInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string, int, string>)null)
              return sh.Invoke(propertyId, startDate, endDate, dataTypeId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getTotalData");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getUser(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getUser(int userId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetUserInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(userId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getUser");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getWallType(System.Int32)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getWallType(int propertyTypeId)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string> sh = this.GetWallTypeInt32;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string>)null)
              return sh.Invoke(propertyTypeId);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getWallType");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.getWallTypes"/>
        /// </summary>
        string eapi::emAPI.IemAPI.getWallTypes()
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string> sh = this.GetWallTypes;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string>)null)
              return sh.Invoke();
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.getWallTypes");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.updateBenchmarks"/>
        /// </summary>
        string eapi::emAPI.IemAPI.updateBenchmarks()
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string> sh = this.UpdateBenchmarks;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string>)null)
              return sh.Invoke();
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.updateBenchmarks");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.updatePassword(System.Int32,System.String)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.updatePassword(int userId, string newPassword)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string> sh = this.UpdatePasswordInt32String;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, string, string>)null)
              return sh.Invoke(userId, newPassword);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.updatePassword");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.usernameIsUnique(System.String)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.usernameIsUnique(string username)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string> sh = this.UsernameIsUniqueString;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string>)null)
              return sh.Invoke(username);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.usernameIsUnique");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.validateInvoice(System.Int32,System.Boolean)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.validateInvoice(int invoiceId, bool saveAfterValidation)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, bool, string> sh = this.ValidateInvoiceInt32Boolean;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<int, bool, string>)null)
              return sh.Invoke(invoiceId, saveAfterValidation);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.validateInvoice");
            }
        }

        /// <summary>Sets the stub of <see cref="M:emAPI.IemAPI.validateUser(System.String,System.String)"/>
        /// </summary>
        string eapi::emAPI.IemAPI.validateUser(string username, string password)
        {
            mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string, string> sh = this.ValidateUserStringString;
            if (sh != (mmf::Microsoft.Moles.Framework.MolesDelegates.Func<string, string, string>)null)
              return sh.Invoke(username, password);
            else 
            {
              mmf::Microsoft.Moles.Framework.Behaviors.IBehavior _behavior = ((mmf::Microsoft.Moles.Framework.Behaviors.IBehaved)this).InstanceBehavior;
              return _behavior.Result<global::emAPI.Moles.SIemAPI, string>(this, "emAPI.IemAPI.validateUser");
            }
        }
    }
}
