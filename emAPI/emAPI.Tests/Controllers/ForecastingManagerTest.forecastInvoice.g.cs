// <copyright file="ForecastingManagerTest.forecastInvoice.g.cs">Copyright ©  2012</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using emAPI.ClassLibrary;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using System.Reflection;
using System.Collections.Generic;

namespace emAPI.Controllers
{
    public partial class ForecastingManagerTest
    {
[TestMethod]
[PexGeneratedBy(typeof(ForecastingManagerTest))]
[PexRaisedException(typeof(TargetInvocationException))]
public void forecastInvoiceThrowsTargetInvocationException383()
{
    ForecastingManager forecastingManager;
    Invoice invoice;
    forecastingManager = new ForecastingManager();
    forecastingManager.mediator = (EMMediator)null;
    invoice = this.forecastInvoice(forecastingManager, (Invoice)null);
}
[TestMethod]
[PexGeneratedBy(typeof(ForecastingManagerTest))]
[PexRaisedException(typeof(TargetInvocationException))]
public void forecastInvoiceThrowsTargetInvocationException850()
{
    ForecastingManager forecastingManager;
    Invoice invoice;
    forecastingManager = new ForecastingManager();
    forecastingManager.mediator = (EMMediator)null;
    Invoice s0 = new Invoice();
    s0.Id = 0;
    s0.PresentRead = 0;
    s0.PreviousRead = 0;
    s0.KWh = 0;
    s0.StandingCharge = 0;
    s0.ConsumptionCharge = 0;
    s0.OtherCharge = 0;
    s0.Checked = false;
    s0.ConsumptionIsValid = false;
    s0.CostIsValid = false;
    s0.BillDate = default(DateTime);
    s0.StartDate = default(DateTime);
    s0.EndDate = default(DateTime);
    s0.CostVariance = 0;
    s0.KWhVariance = 0;
    s0.CostCanBeValidated = default(bool?);
    s0.ConsumptionCanBeValidated = default(bool?);
    s0.Meter = (Meter)null;
    invoice = this.forecastInvoice(forecastingManager, s0);
}
[TestMethod]
[PexGeneratedBy(typeof(ForecastingManagerTest))]
[PexRaisedException(typeof(TargetInvocationException))]
public void forecastInvoiceThrowsTargetInvocationException583()
{
    ForecastingManager forecastingManager;
    Invoice invoice;
    forecastingManager = new ForecastingManager();
    forecastingManager.mediator = (EMMediator)null;
    Invoice s0 = new Invoice();
    s0.Id = 0;
    s0.PresentRead = 0;
    s0.PreviousRead = 0;
    s0.KWh = 0;
    s0.StandingCharge = 0;
    s0.ConsumptionCharge = 0;
    s0.OtherCharge = 0;
    s0.Checked = false;
    s0.ConsumptionIsValid = false;
    s0.CostIsValid = false;
    s0.BillDate = default(DateTime);
    s0.StartDate = new DateTime(4611686018427387903L & 607282404982784L, 
                                (DateTimeKind)(607282404982784uL >> 62));
    s0.EndDate = default(DateTime);
    s0.CostVariance = 0;
    s0.KWhVariance = 0;
    s0.CostCanBeValidated = default(bool?);
    s0.ConsumptionCanBeValidated = default(bool?);
    s0.Meter = (Meter)null;
    invoice = this.forecastInvoice(forecastingManager, s0);
}
[TestMethod]
[PexGeneratedBy(typeof(ForecastingManagerTest))]
[PexRaisedException(typeof(TargetInvocationException))]
public void forecastInvoiceThrowsTargetInvocationException644()
{
    ForecastingManager forecastingManager;
    Invoice invoice;
    forecastingManager = new ForecastingManager();
    forecastingManager.mediator = (EMMediator)null;
    Invoice s0 = new Invoice();
    s0.Id = 0;
    s0.PresentRead = 0;
    s0.PreviousRead = 0;
    s0.KWh = 0;
    s0.StandingCharge = 0;
    s0.ConsumptionCharge = 0;
    s0.OtherCharge = 0;
    s0.Checked = false;
    s0.ConsumptionIsValid = false;
    s0.CostIsValid = false;
    s0.BillDate = default(DateTime);
    s0.StartDate = new DateTime(4611686018427387903L & 607282404982784L, 
                                (DateTimeKind)(607282404982784uL >> 62));
    s0.EndDate = new DateTime(4611686018427387903L & 607282404982784L, 
                              (DateTimeKind)(607282404982784uL >> 62));
    s0.CostVariance = 0;
    s0.KWhVariance = 0;
    s0.CostCanBeValidated = default(bool?);
    s0.ConsumptionCanBeValidated = default(bool?);
    s0.Meter = (Meter)null;
    invoice = this.forecastInvoice(forecastingManager, s0);
}
[TestMethod]
[PexGeneratedBy(typeof(ForecastingManagerTest))]
[PexRaisedException(typeof(TargetInvocationException))]
public void forecastInvoiceThrowsTargetInvocationException345()
{
    ForecastingManager forecastingManager;
    Invoice invoice;
    forecastingManager = new ForecastingManager();
    forecastingManager.mediator = (EMMediator)null;
    Invoice s0 = new Invoice();
    s0.Id = 0;
    s0.PresentRead = 0;
    s0.PreviousRead = 0;
    s0.KWh = 0;
    s0.StandingCharge = 0;
    s0.ConsumptionCharge = 0;
    s0.OtherCharge = 0;
    s0.Checked = false;
    s0.ConsumptionIsValid = false;
    s0.CostIsValid = false;
    s0.BillDate = default(DateTime);
    s0.StartDate = new DateTime(4611686018427387903L & 563247985000448L, 
                                (DateTimeKind)(563247985000448uL >> 62));
    s0.EndDate = new DateTime(4611686018427387903L & 563247985000448L, 
                              (DateTimeKind)(563247985000448uL >> 62));
    s0.CostVariance = 0;
    s0.KWhVariance = 0;
    s0.CostCanBeValidated = default(bool?);
    s0.ConsumptionCanBeValidated = default(bool?);
    Meter s1 = new Meter();
    s1.Id = 0;
    s1.SerialNo = (string)null;
    s1.KWhtoCO2ConversionFactor = 0;
    s1.NumbDigits = 0;
    s1.Fuel = (string)null;
    s1.StartDate = default(DateTime);
    s1.Invoices = (ICollection<Invoice>)null;
    s1.Notes = (ICollection<Annotation>)null;
    s1.Tariffs = (ICollection<Tariff>)null;
    s1.Register = (ICollection<MeterReading>)null;
    s0.Meter = s1;
    invoice = this.forecastInvoice(forecastingManager, s0);
}
    }
}
