//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace emAPIMobile.emAPIService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="emAPIService.IemAPI")]
    public interface IemAPI {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/deleteTariff", ReplyAction="http://tempuri.org/IemAPI/deleteTariffResponse")]
        string deleteTariff(int tariffId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/validateInvoice", ReplyAction="http://tempuri.org/IemAPI/validateInvoiceResponse")]
        string validateInvoice(int invoiceId, bool saveAfterValidation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/forecastNextInvoice", ReplyAction="http://tempuri.org/IemAPI/forecastNextInvoiceResponse")]
        string forecastNextInvoice(int meterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getMeter", ReplyAction="http://tempuri.org/IemAPI/getMeterResponse")]
        string getMeter(int meterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getReading", ReplyAction="http://tempuri.org/IemAPI/getReadingResponse")]
        string getReading(int readingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getMeterReadings", ReplyAction="http://tempuri.org/IemAPI/getMeterReadingsResponse")]
        string getMeterReadings(int meterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getMinimumReadingDate", ReplyAction="http://tempuri.org/IemAPI/getMinimumReadingDateResponse")]
        string getMinimumReadingDate(int meterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getMinimumReadingDateForEdit", ReplyAction="http://tempuri.org/IemAPI/getMinimumReadingDateForEditResponse")]
        string getMinimumReadingDateForEdit(int meterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getLastInvoiceDate", ReplyAction="http://tempuri.org/IemAPI/getLastInvoiceDateResponse")]
        string getLastInvoiceDate(int meterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getDetailsForMeter", ReplyAction="http://tempuri.org/IemAPI/getDetailsForMeterResponse")]
        string getDetailsForMeter(int meterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getDataFromMeter", ReplyAction="http://tempuri.org/IemAPI/getDataFromMeterResponse")]
        string getDataFromMeter(int meterId, string startDate, string endDate, int dataTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getDataFromMeterByInterval", ReplyAction="http://tempuri.org/IemAPI/getDataFromMeterByIntervalResponse")]
        string getDataFromMeterByInterval(int meterId, string startDate, string endDate, int intervalId, int dataTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/createElectricityMeter", ReplyAction="http://tempuri.org/IemAPI/createElectricityMeterResponse")]
        string createElectricityMeter(string serialNo, double scalingFactor, int numbDigits, string startDate, int propertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/createGasMeter", ReplyAction="http://tempuri.org/IemAPI/createGasMeterResponse")]
        string createGasMeter(string serialNo, double meterCoefficient, int numbDigits, string startDate, int propertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/createMeterReading", ReplyAction="http://tempuri.org/IemAPI/createMeterReadingResponse")]
        string createMeterReading(string date, int reading, int meterId, int propertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/editMeter", ReplyAction="http://tempuri.org/IemAPI/editMeterResponse")]
        string editMeter(int meterId, string newMeter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/editMeterReading", ReplyAction="http://tempuri.org/IemAPI/editMeterReadingResponse")]
        string editMeterReading(int readingId, int meterId, string newMeter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/deleteMeter", ReplyAction="http://tempuri.org/IemAPI/deleteMeterResponse")]
        string deleteMeter(int meterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/deleteReading", ReplyAction="http://tempuri.org/IemAPI/deleteReadingResponse")]
        string deleteReading(int readingId, int meterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getInvoicesForMeter", ReplyAction="http://tempuri.org/IemAPI/getInvoicesForMeterResponse")]
        string getInvoicesForMeter(int meterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getInvoice", ReplyAction="http://tempuri.org/IemAPI/getInvoiceResponse")]
        string getInvoice(int invoiceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/createInvoice", ReplyAction="http://tempuri.org/IemAPI/createInvoiceResponse")]
        string createInvoice(int meterId, string billDate, string startDate, string endDate, int presentRead, int previousRead, double consumptionCharge, double standingCharge, double otherCharge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/editInvoice", ReplyAction="http://tempuri.org/IemAPI/editInvoiceResponse")]
        string editInvoice(int invoiceId, string newInvoice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/deleteInvoice", ReplyAction="http://tempuri.org/IemAPI/deleteInvoiceResponse")]
        string deleteInvoice(int invoiceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getSCPeriods", ReplyAction="http://tempuri.org/IemAPI/getSCPeriodsResponse")]
        string getSCPeriods();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getTariff", ReplyAction="http://tempuri.org/IemAPI/getTariffResponse")]
        string getTariff(int tariffId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getMinimumTariffDate", ReplyAction="http://tempuri.org/IemAPI/getMinimumTariffDateResponse")]
        string getMinimumTariffDate(int meterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getMinimumTariffDateForEdit", ReplyAction="http://tempuri.org/IemAPI/getMinimumTariffDateForEditResponse")]
        string getMinimumTariffDateForEdit(int meterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/createTariff", ReplyAction="http://tempuri.org/IemAPI/createTariffResponse")]
        string createTariff(double value, string startDate, int standingChargePeriodId, int bandingPeriodId, int meterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/createTariffBand", ReplyAction="http://tempuri.org/IemAPI/createTariffBandResponse")]
        string createTariffBand(int upperLimit, int lowerLimit, double rate, int tariffId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/editTariff", ReplyAction="http://tempuri.org/IemAPI/editTariffResponse")]
        string editTariff(int tariffId, string newTariff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/usernameIsUnique", ReplyAction="http://tempuri.org/IemAPI/usernameIsUniqueResponse")]
        string usernameIsUnique(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/emailIsUnique", ReplyAction="http://tempuri.org/IemAPI/emailIsUniqueResponse")]
        string emailIsUnique(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/createUser", ReplyAction="http://tempuri.org/IemAPI/createUserResponse")]
        string createUser(string username, string forename, string surname, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/validateUser", ReplyAction="http://tempuri.org/IemAPI/validateUserResponse")]
        string validateUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getPropertiesForUser", ReplyAction="http://tempuri.org/IemAPI/getPropertiesForUserResponse")]
        string getPropertiesForUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getUser", ReplyAction="http://tempuri.org/IemAPI/getUserResponse")]
        string getUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getComparativeCostsForUser", ReplyAction="http://tempuri.org/IemAPI/getComparativeCostsForUserResponse")]
        string getComparativeCostsForUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/editUser", ReplyAction="http://tempuri.org/IemAPI/editUserResponse")]
        string editUser(int userId, string newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/updatePassword", ReplyAction="http://tempuri.org/IemAPI/updatePasswordResponse")]
        string updatePassword(int userId, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getPropertyTypes", ReplyAction="http://tempuri.org/IemAPI/getPropertyTypesResponse")]
        string getPropertyTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getProperty", ReplyAction="http://tempuri.org/IemAPI/getPropertyResponse")]
        string getProperty(int propertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/createProperty", ReplyAction="http://tempuri.org/IemAPI/createPropertyResponse")]
        string createProperty(string name, string postcode, int floorArea, int numbBedrooms, int typeId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getPropertyTypeId", ReplyAction="http://tempuri.org/IemAPI/getPropertyTypeIdResponse")]
        string getPropertyTypeId(int heatingId, int buildingId, int wallId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getHeatingTypes", ReplyAction="http://tempuri.org/IemAPI/getHeatingTypesResponse")]
        string getHeatingTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getBuildingTypes", ReplyAction="http://tempuri.org/IemAPI/getBuildingTypesResponse")]
        string getBuildingTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getWallTypes", ReplyAction="http://tempuri.org/IemAPI/getWallTypesResponse")]
        string getWallTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getTotalData", ReplyAction="http://tempuri.org/IemAPI/getTotalDataResponse")]
        string getTotalData(int propertyId, string startDate, string endDate, int dataTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getElecData", ReplyAction="http://tempuri.org/IemAPI/getElecDataResponse")]
        string getElecData(int propertyId, string startDate, string endDate, int dataTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getGasData", ReplyAction="http://tempuri.org/IemAPI/getGasDataResponse")]
        string getGasData(int propertyId, string startDate, string endDate, int dataTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getBenchmarkForProperty", ReplyAction="http://tempuri.org/IemAPI/getBenchmarkForPropertyResponse")]
        string getBenchmarkForProperty(int propertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getAnonymousProperties", ReplyAction="http://tempuri.org/IemAPI/getAnonymousPropertiesResponse")]
        string getAnonymousProperties(string propertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getDataAtProperty", ReplyAction="http://tempuri.org/IemAPI/getDataAtPropertyResponse")]
        string getDataAtProperty(int propertyId, string startDate, string endDate, int intervalId, int dataTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getBuildingType", ReplyAction="http://tempuri.org/IemAPI/getBuildingTypeResponse")]
        string getBuildingType(int propertyTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getHeatingType", ReplyAction="http://tempuri.org/IemAPI/getHeatingTypeResponse")]
        string getHeatingType(int propertyTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/getWallType", ReplyAction="http://tempuri.org/IemAPI/getWallTypeResponse")]
        string getWallType(int propertyTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/editProperty", ReplyAction="http://tempuri.org/IemAPI/editPropertyResponse")]
        string editProperty(int propertyId, string newProperty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/deleteProperty", ReplyAction="http://tempuri.org/IemAPI/deletePropertyResponse")]
        string deleteProperty(int propertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IemAPI/updateBenchmarks", ReplyAction="http://tempuri.org/IemAPI/updateBenchmarksResponse")]
        string updateBenchmarks();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IemAPIChannel : emAPIMobile.emAPIService.IemAPI, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IemAPIClient : System.ServiceModel.ClientBase<emAPIMobile.emAPIService.IemAPI>, emAPIMobile.emAPIService.IemAPI {
        
        public IemAPIClient() {
        }
        
        public IemAPIClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IemAPIClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IemAPIClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IemAPIClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string deleteTariff(int tariffId) {
            return base.Channel.deleteTariff(tariffId);
        }
        
        public string validateInvoice(int invoiceId, bool saveAfterValidation) {
            return base.Channel.validateInvoice(invoiceId, saveAfterValidation);
        }
        
        public string forecastNextInvoice(int meterId) {
            return base.Channel.forecastNextInvoice(meterId);
        }
        
        public string getMeter(int meterId) {
            return base.Channel.getMeter(meterId);
        }
        
        public string getReading(int readingId) {
            return base.Channel.getReading(readingId);
        }
        
        public string getMeterReadings(int meterId) {
            return base.Channel.getMeterReadings(meterId);
        }
        
        public string getMinimumReadingDate(int meterId) {
            return base.Channel.getMinimumReadingDate(meterId);
        }
        
        public string getMinimumReadingDateForEdit(int meterId) {
            return base.Channel.getMinimumReadingDateForEdit(meterId);
        }
        
        public string getLastInvoiceDate(int meterId) {
            return base.Channel.getLastInvoiceDate(meterId);
        }
        
        public string getDetailsForMeter(int meterId) {
            return base.Channel.getDetailsForMeter(meterId);
        }
        
        public string getDataFromMeter(int meterId, string startDate, string endDate, int dataTypeId) {
            return base.Channel.getDataFromMeter(meterId, startDate, endDate, dataTypeId);
        }
        
        public string getDataFromMeterByInterval(int meterId, string startDate, string endDate, int intervalId, int dataTypeId) {
            return base.Channel.getDataFromMeterByInterval(meterId, startDate, endDate, intervalId, dataTypeId);
        }
        
        public string createElectricityMeter(string serialNo, double scalingFactor, int numbDigits, string startDate, int propertyId) {
            return base.Channel.createElectricityMeter(serialNo, scalingFactor, numbDigits, startDate, propertyId);
        }
        
        public string createGasMeter(string serialNo, double meterCoefficient, int numbDigits, string startDate, int propertyId) {
            return base.Channel.createGasMeter(serialNo, meterCoefficient, numbDigits, startDate, propertyId);
        }
        
        public string createMeterReading(string date, int reading, int meterId, int propertyId) {
            return base.Channel.createMeterReading(date, reading, meterId, propertyId);
        }
        
        public string editMeter(int meterId, string newMeter) {
            return base.Channel.editMeter(meterId, newMeter);
        }
        
        public string editMeterReading(int readingId, int meterId, string newMeter) {
            return base.Channel.editMeterReading(readingId, meterId, newMeter);
        }
        
        public string deleteMeter(int meterId) {
            return base.Channel.deleteMeter(meterId);
        }
        
        public string deleteReading(int readingId, int meterId) {
            return base.Channel.deleteReading(readingId, meterId);
        }
        
        public string getInvoicesForMeter(int meterId) {
            return base.Channel.getInvoicesForMeter(meterId);
        }
        
        public string getInvoice(int invoiceId) {
            return base.Channel.getInvoice(invoiceId);
        }
        
        public string createInvoice(int meterId, string billDate, string startDate, string endDate, int presentRead, int previousRead, double consumptionCharge, double standingCharge, double otherCharge) {
            return base.Channel.createInvoice(meterId, billDate, startDate, endDate, presentRead, previousRead, consumptionCharge, standingCharge, otherCharge);
        }
        
        public string editInvoice(int invoiceId, string newInvoice) {
            return base.Channel.editInvoice(invoiceId, newInvoice);
        }
        
        public string deleteInvoice(int invoiceId) {
            return base.Channel.deleteInvoice(invoiceId);
        }
        
        public string getSCPeriods() {
            return base.Channel.getSCPeriods();
        }
        
        public string getTariff(int tariffId) {
            return base.Channel.getTariff(tariffId);
        }
        
        public string getMinimumTariffDate(int meterId) {
            return base.Channel.getMinimumTariffDate(meterId);
        }
        
        public string getMinimumTariffDateForEdit(int meterId) {
            return base.Channel.getMinimumTariffDateForEdit(meterId);
        }
        
        public string createTariff(double value, string startDate, int standingChargePeriodId, int bandingPeriodId, int meterId) {
            return base.Channel.createTariff(value, startDate, standingChargePeriodId, bandingPeriodId, meterId);
        }
        
        public string createTariffBand(int upperLimit, int lowerLimit, double rate, int tariffId) {
            return base.Channel.createTariffBand(upperLimit, lowerLimit, rate, tariffId);
        }
        
        public string editTariff(int tariffId, string newTariff) {
            return base.Channel.editTariff(tariffId, newTariff);
        }
        
        public string usernameIsUnique(string username) {
            return base.Channel.usernameIsUnique(username);
        }
        
        public string emailIsUnique(string email) {
            return base.Channel.emailIsUnique(email);
        }
        
        public string createUser(string username, string forename, string surname, string password, string email) {
            return base.Channel.createUser(username, forename, surname, password, email);
        }
        
        public string validateUser(string username, string password) {
            return base.Channel.validateUser(username, password);
        }
        
        public string getPropertiesForUser(int userId) {
            return base.Channel.getPropertiesForUser(userId);
        }
        
        public string getUser(int userId) {
            return base.Channel.getUser(userId);
        }
        
        public string getComparativeCostsForUser(int userId) {
            return base.Channel.getComparativeCostsForUser(userId);
        }
        
        public string editUser(int userId, string newUser) {
            return base.Channel.editUser(userId, newUser);
        }
        
        public string updatePassword(int userId, string newPassword) {
            return base.Channel.updatePassword(userId, newPassword);
        }
        
        public string getPropertyTypes() {
            return base.Channel.getPropertyTypes();
        }
        
        public string getProperty(int propertyId) {
            return base.Channel.getProperty(propertyId);
        }
        
        public string createProperty(string name, string postcode, int floorArea, int numbBedrooms, int typeId, int userId) {
            return base.Channel.createProperty(name, postcode, floorArea, numbBedrooms, typeId, userId);
        }
        
        public string getPropertyTypeId(int heatingId, int buildingId, int wallId) {
            return base.Channel.getPropertyTypeId(heatingId, buildingId, wallId);
        }
        
        public string getHeatingTypes() {
            return base.Channel.getHeatingTypes();
        }
        
        public string getBuildingTypes() {
            return base.Channel.getBuildingTypes();
        }
        
        public string getWallTypes() {
            return base.Channel.getWallTypes();
        }
        
        public string getTotalData(int propertyId, string startDate, string endDate, int dataTypeId) {
            return base.Channel.getTotalData(propertyId, startDate, endDate, dataTypeId);
        }
        
        public string getElecData(int propertyId, string startDate, string endDate, int dataTypeId) {
            return base.Channel.getElecData(propertyId, startDate, endDate, dataTypeId);
        }
        
        public string getGasData(int propertyId, string startDate, string endDate, int dataTypeId) {
            return base.Channel.getGasData(propertyId, startDate, endDate, dataTypeId);
        }
        
        public string getBenchmarkForProperty(int propertyId) {
            return base.Channel.getBenchmarkForProperty(propertyId);
        }
        
        public string getAnonymousProperties(string propertyId) {
            return base.Channel.getAnonymousProperties(propertyId);
        }
        
        public string getDataAtProperty(int propertyId, string startDate, string endDate, int intervalId, int dataTypeId) {
            return base.Channel.getDataAtProperty(propertyId, startDate, endDate, intervalId, dataTypeId);
        }
        
        public string getBuildingType(int propertyTypeId) {
            return base.Channel.getBuildingType(propertyTypeId);
        }
        
        public string getHeatingType(int propertyTypeId) {
            return base.Channel.getHeatingType(propertyTypeId);
        }
        
        public string getWallType(int propertyTypeId) {
            return base.Channel.getWallType(propertyTypeId);
        }
        
        public string editProperty(int propertyId, string newProperty) {
            return base.Channel.editProperty(propertyId, newProperty);
        }
        
        public string deleteProperty(int propertyId) {
            return base.Channel.deleteProperty(propertyId);
        }
        
        public string updateBenchmarks() {
            return base.Channel.updateBenchmarks();
        }
    }
}
